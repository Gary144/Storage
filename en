###################################################
###################################################
##############  成员：燕松，吴家璇，唐彬  #############
##############  代码主笔：燕松          #############
##############  EfficientNet © GOOGLE  ############
###################################################
###################################################

#---------------------代 码 主 体-------------------#

# 各种用到的第三方库导入，主要是pytorch，numpy和matplotlib
import torch
import numpy as np
from torchvision import datasets
import torchvision.transforms as transforms
from torch.utils.data.sampler import SubsetRandomSampler
import torch.nn as nn
import torch.optim as optim
from efficientnet_pytorch import EfficientNet


# 检测GPU的可用性，如果不能使用，给用户返回对话
GPU = torch.cuda.is_available() # 这里的GPU是判断变量，不是device
if not GPU:
    print ('You cannot use GPU') # 如果不能使用
                                 # torch.cuda.is_available()返回GPU是否可用的信息，可用返回1，不可用返回0
else:
    print('GPU is ok') # 如果可以使用
# 超参数的初赋值
num_workers = 0
batch_size = 16
valid_size = 0.2

# Batch Normalization
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,0.5,0.5),(0.5,0.5,0.5))
])



train_data = datasets.CIFAR100('data',
                              train=True,
                              download=True,
                              transform=transform)

test_data = datasets.CIFAR100('data',
                             train=True,
                             download=True,
                             transform=transform)



num_train = len(train_data)
indices = list(range(num_train))
np.random.shuffle(indices)
split = int (np.floor(valid_size*num_train))
train_idx,valid_idx = indices[split:],indices[:split]


train_sampler = SubsetRandomSampler(train_idx)
valid_sampler = SubsetRandomSampler(valid_idx)


train_loader = torch.utils.data.DataLoader(train_data,
                                           batch_size=batch_size,
                                           sampler=train_sampler,
                                           num_workers=num_workers,
                                           pin_memory=True)
valid_loader = torch.utils.data.DataLoader(train_data,
                                           batch_size=batch_size,
                                           sampler=valid_sampler,
                                           num_workers=num_workers,
                                           pin_memory=True)
test_loader = torch.utils.data.DataLoader(test_data,
                                          batch_size=batch_size,
                                          num_workers=num_workers,
                                          pin_memory=True)


classes = ['1', '2', '3', '4', '5',
           '6', '7', '8', '9', '10',
           '11','12','13','14','15',
           '16','17','18','19','20',
           '21','22','23','24','25',
           '26','27','28','29','30',
           '31','32','33','34','35',
           '36','37','38','39','40',
           '41','42','43','44','45',
           '46','47','48','49','50',
           '51','52','53','54','55',
           '56','57','58','59','60',
           '61','62','63','64','65',
           '66','67','68','69','70',
           '71','72','73','74','75',
           '76','77','78','79','80',
           '81','82','83','84','85',
           '86','87','88','89','90',
           '91','92','93','94','95',
           '96','97','98','99','100']




# 使用GOOGLE的EfficientNet-B-1进行训练
model = EfficientNet.from_pretrained('efficientnet-b0') # 预训练模型的导入
print(model)

# 只训练线性层
only_train_fc = True
if only_train_fc:
    for param in model.parameters():
        param.requires_grad_(False)
feature = model._fc.in_features
model._fc = nn.Linear(in_features=feature,out_features=100,bias=True)


if GPU:
    model.cuda()


criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(),lr=0.0005)


n_epochs = 60

valid_loss_min = np.Inf

for epoch in range(1,n_epochs+1):

    train_loss = 0.0
    valid_loss = 0.0

    model.train()
    for data,target in train_loader:
        if GPU:
            data,target = data.cuda(),target.cuda()
        optimizer.zero_grad()
        output = model(data)
        loss = criterion(output,target)
        loss.backward()
        optimizer.step()
        train_loss += loss.item()*data.size(0)


    model.eval()
    for data,target in valid_loader:
        if GPU:
            data,target = data.cuda(),target.cuda()
        output = model(data)
        loss = criterion(output,target)
        valid_loss += loss.item()*data.size(0)

    train_loss = train_loss/len(train_loader.sampler)
    valid_loss = valid_loss/len(valid_loader.sampler)

    print('Epoch:{} \tTraining loss:{} \tValidation loss:{}'.format(
        epoch,train_loss,valid_loss
    ))

    if valid_loss <= valid_loss_min:
        print ('Validation loss decreased ({} --> {}). Saving model ...'.format(
            valid_loss_min,valid_loss
        ))
        torch.save(model.state_dict(),'model_cifar.pt')
        valid_loss_min = valid_loss

model.load_state_dict(torch.load('model_cifar.pt',map_location=torch.device('cpu')))

test_loss = 0.0
class_correct = list(0. for i in range(100))
class_total = list(0. for i in range(100))

model.eval()
for data, target in test_loader:
    if GPU:
        data, target = data.cuda(), target.cuda()
    output = model(data)
    loss = criterion(output, target)
    test_loss += loss.item()*data.size(0)
    _, pred = torch.max(output, 1)
    correct_tensor = pred.eq(target.data.view_as(pred))
    correct = np.squeeze(correct_tensor.numpy()) if not GPU else np.squeeze(correct_tensor.cpu().numpy())
    for i in range(batch_size):
        label = target.data[i]
        class_correct[label] += correct[i].item()
        class_total[label] += 1

test_loss = test_loss/len(test_loader.dataset)
print('Test Loss: {:.6f}\n'.format(test_loss))

for i in range(100):
    if class_total[i] > 0:
        print('Test Accuracy of %5s: %2d%% (%2d/%2d)' % (
            classes[i], 100 * class_correct[i] / class_total[i],
            np.sum(class_correct[i]), np.sum(class_total[i])))
    else:
        print('Test Accuracy of %5s: N/A (no training examples)' % (classes[i]))

print('\nTest Accuracy (Overall): %2d%% (%2d/%2d)' % (
    100. * np.sum(class_correct) / np.sum(class_total),
    np.sum(class_correct), np.sum(class_total)))

#---------------------代 码 结 尾-------------------#
#                 GOOGLE DeepMind                  #
